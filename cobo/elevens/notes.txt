BURN (Ruiwen Tang, Brian Wang, Nora Miller)
APCS
L07 - But These Go Up To Eleven
2022-03-18
Time spent: 3.9 hrs

DISCO:
 - Interestingly enough, some text editors provide unmappable unicode (or not?) characters.
   error below:
   Shuffler.java:96: error: unmappable character (0x9D) for encoding windows-1252
        Thus, flip should return “heads▒? about twice as often as it returns “tails▒?
   Since it was copy pasted, we had to retype the quotation marks from within atom.
 - Our group found out that activity 3 question 3 has only one answer, despite seeming like it has multiple.
   This is because we cannot swap to a number larger than the current number, meaning that unless we follow the order
    0, 1, 1, 0
   As in, after the (size - k)th move, the last (size - k) elements are put in their final positions, because we cannot swap to a number larger than k.
 - In Activity 2, we thought it was interesting how we could save sets of possible properties for an object by splitting them into different arrays.
   For example, our cards in Activity 2 had different arrays that held their attributes, like values and faces.

QCC:
 - In activity 3 Shuffler.java, we realized that for the perfect shuffle, we would fill the new array with a shuffled deck.
   However, the algorithm provided by the cobo does not put the shuffled array back into the original deck.
 - In activity 3, where are we supposed to put the methods to be written in the questions? We put them in Shuffler.java, but it still seems to not belong there.
 - Activity 3 question 2: If there were duplicate elements, a good idea would be to sort the arrays instead of manually searching for each element.
   Having duplicate elements would falsely trip the flag system for an element that does not exist in the other array,
   but by sorting, we don't have to individually search for each element, we can just compare indexes.
   This would turn the runtime to n * log(n), or whatever our sort runtime is.
   The sort approach would also work for the non-duplicate case, while also reducing the runtime (which is currently at linear)
 - Where is the playable version of elevens for Activity 6?

Act 1:
Card class
Attributes:
- Number (int or string? 11 = J, 12 = Q, etc?)
- Suit (1 letter char/string?)
- Up/down facing

Methods:
- set methods
- getInfo
  (num and suit seperate?)
- flip

Act 2:
Shuffle (randomize), deal, show (flip?)

Attributes:
- 52 cards? (54 with Joker)
- deck size

Methods:
- shuffle
- deal

Questions:
1. A deck contains cards
2. 6 cards
3. ranks = {"2", "3", "4", "5", "6", "7", "8", 9, 10, jack, queen, king, ace}
   suits = {Spade, Club, Diamond, Heart}
   pointValues = {2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11}
4. no

Act 3:
1 and 2 in Shuffler.java
3. 0, 1, 1, 0 is one set of random numbers.
   Trace:
   {1,2,3,4}
   r = 0
   {4,2,3,1}
   r=1
   {4,3,2,1}
   r=1
   {4,3,2,1}
   r=0
   {4,3,2,1}

Act 5:
skipped

Act 6:
1. (5spade, 6club), (5club, 6club),
2. Yes. The only way to remove/have three cards left is if the are a pair of J, Q, and K.
   Specifically, the only trio that can exist is a set of J, Q, and K, as any number value card can only exist in pairs.
   Likewise, you can only have, when reduced, one J, one Q, and one K, as these three cards exist only in 4 sets of three.
3. No. Suits do not matter so there is no variation within the groups of numbered cards and royal cards.
   And between picking numbered cards and royal cards, you can only pick numbered cards in pairs and royal cards in triplets.
   Therefore, only the order of cards recieved matters.

Act 7:
1. Dealt cards, undealt cards
   Card card1
   Card card2
   ...
   Card cardx (where x is the number of cards available to choose from at once)
   Deck undealt

2. a. Shuffle the deck.
   b. Deal until 9 cards are flipped up on the table.
   c. (player turn) Remove either pairs of number face cards adding up to 11 (ace being 1), or triplets of a J, Q, and K regardless of suit.
   d. Repeat from step a until no moves are possible or all cards have been dealt.

3. No, the game currently is not implemented to detect if the game should end or continue.

4. a. Under anotherPlayIsPossible(),
      and called from newGame() and the constructor.
   b. anotherPlayIsPossible() or isLegal() (which could be called in anotherPlayIsPossible()).
   c. 0, 1, 3, 6, 7
   d.
    public static void printCards(ElevensBoard board){
      List<Integer> cIndexes = board.cardIndexes();
      for(int i : cIndexes){
        System.out.println(board.cardAt(i));
      }
    }
    e. anotherPlayIsPossible()
       isLegal is provided cards to choose from to see if the selected move is legal, whereas anotherPlayIsPossible() outright scans the upright cards and tells if another move is possible.
       Because we need to see if there is an 11 sum pair or a JQK triplet to see if a move is possible, and we need the card indices to check that, we call all 3 methods in anotherPlayIsPossible().

Act 8:
1. Similarities:
    same deck
    same dealing methods
    same general rules (need to have an available pair/trio to remove)
   Differences:
    different sums
    different face up cards
    different special cases for (royal) cards
    different point values

2. When we construct an ElevensBoard, we assign all of the instance variables in board to suit the specific game, which in this case, is elevens.

3. isLegal() and anotherPlayIsPossible() are abstract methods.
   They are implemented in ElevensBoard with the same signature, minus the "abstract". There is also an @Override.
   Sort of. The differences here that aren't covered are the different number of cards dealt, which could be handled through differen constructors for different games.
   Although it would seem to make more sense to have the BOARD_SIZE variable be in Board.java instead of specific game boards.

Act 9:
1. Size only has to return the size of the deck, the board size has no difference.

2. The way cards are removed from a deck after being dealt does not differ between games.

3. Although it would work, we wouldn't get the benefit of being able to just call a method used in all of these games.
   We would instead have to implement the repeated methods within each game.
